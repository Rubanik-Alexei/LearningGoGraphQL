// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Director struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Film struct {
	ID       string    `json:"id"`
	Name     string    `json:"name"`
	Year     int       `json:"year"`
	Genre    Genre     `json:"genre"`
	Director *Director `json:"director"`
}

type FilmInput struct {
	Name     string  `json:"name"`
	ID       *string `json:"id"`
	Year     int     `json:"year"`
	Genre    Genre   `json:"genre"`
	Director string  `json:"director"`
}

type Genre string

const (
	// Action
	GenreAction Genre = "Action"
	// Comedy
	GenreComedy Genre = "Comedy"
	// Horror
	GenreHorror Genre = "Horror"
	// Drama
	GenreDrama Genre = "Drama"
)

var AllGenre = []Genre{
	GenreAction,
	GenreComedy,
	GenreHorror,
	GenreDrama,
}

func (e Genre) IsValid() bool {
	switch e {
	case GenreAction, GenreComedy, GenreHorror, GenreDrama:
		return true
	}
	return false
}

func (e Genre) String() string {
	return string(e)
}

func (e *Genre) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Genre(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Genre", str)
	}
	return nil
}

func (e Genre) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
